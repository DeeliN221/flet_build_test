# 工作流名称
name: Flet Cross-Platform Build & Release

# 触发工作流的事件
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # 匹配类似 v1.0.0, v2.1.5 的标签
      - 'v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+' # 如果你需要发布 beta 版本，例如 v1.0.0-beta.1
  workflow_dispatch:

jobs:
  # 构建 Web 和 Android APK (在 Linux 上)
  build-web-apk-linux:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行器
    outputs: # 定义输出，方便 release job 知道产物路径
      apk_path: build/apk
      web_path: build/web
    steps:
      - name: 检出代码
        uses: actions/checkout@v4 # 检出仓库代码

      - name: 安装 Pixi (Linux)
        run: |
          curl -fsSL https://pixi.sh/install.sh | bash
          echo "$HOME/.pixi/bin" >> $GITHUB_PATH

      - name: 构建 Flet Web 应用
        run: pixi run flet build web
        env:
          PYTHONUTF8: 1

      - name: 上传 Web 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: flet-web-app
          path: ${{ steps.build-web-apk-linux.outputs.web_path }} # 使用上面定义的输出

      - name: 构建 Flet APK 应用
        run: pixi run flet build apk -v
        env:
          PYTHONUTF8: 1
          
      - name: 上传 APK 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: flet-apk-app
          path: ${{ steps.build-web-apk-linux.outputs.apk_path }} # 使用上面定义的输出
          # APK 文件的典型路径，可能需要根据 Flet 版本和项目结构进行调整
          # 通常 Flet 会将 APK 放在 build/apk/app-release.apk 或类似路径

  # 构建 macOS 和 iOS 应用 (在 macOS 上)
  build-macos-ios:
    runs-on: macos-latest # 使用最新的 macOS 运行器
    outputs:
      macos_path: build/macos
      ios_path: build/ipa # 假设 IPA 文件在 build/ipa 目录下
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装 Pixi (macOS)
        run: |
          curl -fsSL https://pixi.sh/install.sh | bash
          echo "$HOME/.pixi/bin" >> $GITHUB_PATH
          
      - name: 构建 Flet macOS 应用
        run: pixi run flet build macos
        env:
          PYTHONUTF8: 1
          
      - name: 上传 macOS 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: flet-macos-app
          path: ${{ steps.build-macos-ios.outputs.macos_path }}

      - name: 构建 Flet iOS 应用
        run: pixi run flet build ipa
        env:
          PYTHONUTF8: 1
          
      - name: 上传 iOS 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: flet-ios-app
          path: ${{ steps.build-macos-ios.outputs.ios_path }}
          # IPA 文件的典型路径，可能需要根据 Flet 版本和项目结构进行调整
          # 例如 build/ipa/your_app_name.ipa

  # 构建 Windows 应用 (在 Windows 上)
  build-windows:
    runs-on: windows-latest # 使用最新的 Windows 运行器
    outputs:
      windows_path: build/windows
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 Pixi (Windows)
        run: |
          Invoke-WebRequest -Uri "https://github.com/prefix-dev/pixi/releases/latest/download/pixi-x86_64-pc-windows-msvc.exe" -OutFile "pixi.exe"
          New-Item -ItemType Directory -Force -Path "C:\pixi-bin" | Out-Null
          Move-Item pixi.exe C:\pixi-bin\pixi.exe -Force
          echo "C:\pixi-bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh
    
      - name: 构建 Flet Windows 应用
        run: pixi run flet build windows
        env:
          PYTHONUTF8: 1
          
      - name: 上传 Windows 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: flet-windows-app
          path: ${{ steps.build-windows.outputs.windows_path }}

  # 发布 Release
  release:
    runs-on: ubuntu-latest
    # 确保所有构建任务完成后再执行 release
    needs: [build-web-apk-linux, build-macos-ios, build-windows]
    permissions:
      contents: write # 需要写入权限来创建 Release 和上传附件
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          # path 指定下载到哪个目录，默认会以 artifact name 创建子目录
          path: artifacts 
          # 如果不指定 name，则会下载所有 artifacts

      - name: 列出下载的产物 (调试用)
        run: ls -R artifacts

      - name: 创建 Release 并上传产物
        uses: softprops/action-gh-release@v2
        with:
          # GITHUB_TOKEN 会自动提供
          # tag_name: ${{ github.ref_name }} # 使用触发工作流的标签名
          # name: Release ${{ github.ref_name }} # Release 的标题
          # body: | # Release 的描述内容，可以自定义
          #   自动构建的 Flet 应用产物。
          #   - Web 应用
          #   - Android APK
          #   - macOS 应用
          #   - iOS 应用 (IPA)
          #   - Windows 应用
          draft: false # 是否为草稿 Release
          prerelease: ${{ contains(github.ref_name, '-beta') }} # 如果标签包含 -beta，则标记为预发布
          files: | # 要上传的文件列表，支持通配符
            artifacts/flet-web-app/*
            artifacts/flet-apk-app/* # 通常 APK 是单个文件，例如 app-release.apk
            artifacts/flet-macos-app/* # macOS 通常是 .app 目录或 .dmg 文件
            artifacts/flet-ios-app/* # iOS 通常是 .ipa 文件
            artifacts/flet-windows-app/* # Windows 通常是 .exe 或 .msi，或者一个包含 .exe 的目录
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
